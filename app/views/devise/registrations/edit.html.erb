<h2>Account Settings</h2>

<div class="row">
  <div class="col-md-6">
    <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put, class: "needs-validation", novalidate: true }) do |f| %>
      <%= render "devise/shared/error_messages", resource: resource %>

      <div class="mb-3">
        <%= f.label :username, class: "form-label" %>
        <div class="input-group">
          <%= f.text_field :username, autofocus: true, class: "form-control", required: true %>
          <span class="input-group-text" id="username-feedback" style="min-width: 40px;">
            <span id="username-spinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
            <span id="username-check" class="d-none text-success">✓</span>
            <span id="username-error" class="d-none text-danger">✗</span>
          </span>
        </div>
        <div class="invalid-feedback">
          Please choose a username.
        </div>
        <div class="text-danger" id="username-error-message"></div>
      </div>

      <div class="row mb-3">
        <div class="col-md-6">
          <%= f.label :first_name, class: "form-label" %>
          <%= f.text_field :first_name, class: "form-control" %>
        </div>
        <div class="col-md-6">
          <%= f.label :last_name, class: "form-label" %>
          <%= f.text_field :last_name, class: "form-control" %>
        </div>
      </div>

      <div class="mb-3">
        <%= f.label :email, class: "form-label" %>
        <%= f.email_field :email, autocomplete: "email", class: "form-control" %>
      </div>

      <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
        <div class="alert alert-warning">Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
      <% end %>

      <div class="mb-3">
        <%= f.label :password, class: "form-label" %> <i>(leave blank if you don't want to change it)</i>
        <%= f.password_field :password, autocomplete: "new-password", class: "form-control" %>
        <% if @minimum_password_length %>
          <div class="form-text"><%= @minimum_password_length %> characters minimum</div>
        <% end %>
      </div>

      <div class="mb-3">
        <%= f.label :password_confirmation, class: "form-label" %>
        <%= f.password_field :password_confirmation, autocomplete: "new-password", class: "form-control" %>
      </div>

      <div class="mb-3">
        <%= f.label :current_password, class: "form-label" %> <i>(we need your current password to confirm your changes)</i>
        <%= f.password_field :current_password, autocomplete: "current-password", class: "form-control" %>
      </div>

      <div class="mb-3">
        <%= f.submit "Update", class: "btn btn-primary" %>
      </div>

      <script>
        // Username availability check with debounce
        (() => {
          const usernameField = document.getElementById('<%= f.object_name %>_username');
          const usernameSpinner = document.getElementById('username-spinner');
          const usernameCheck = document.getElementById('username-check');
          const usernameError = document.getElementById('username-error');
          const usernameErrorMessage = document.getElementById('username-error-message');
          const originalUsername = usernameField.value.trim();

          let debounceTimer;

          // Initially show check mark for their current username
          usernameCheck.classList.remove('d-none');

          usernameField.addEventListener('input', function() {
            const username = this.value.trim();

            // If username is unchanged, show checkmark and exit
            if (username === originalUsername) {
              usernameSpinner.classList.add('d-none');
              usernameCheck.classList.remove('d-none');
              usernameError.classList.add('d-none');
              usernameErrorMessage.textContent = '';
              return;
            }

            // Show spinner and hide check/error icons
            if (username.length > 0) {
              usernameSpinner.classList.remove('d-none');
              usernameCheck.classList.add('d-none');
              usernameError.classList.add('d-none');
              usernameErrorMessage.textContent = '';
            } else {
              usernameSpinner.classList.add('d-none');
              usernameCheck.classList.add('d-none');
              usernameError.classList.add('d-none');
              usernameErrorMessage.textContent = '';
            }

            clearTimeout(debounceTimer);

            debounceTimer = setTimeout(() => {
              if (username.length > 0) {
                fetch('/users/check_username', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                  },
                  body: JSON.stringify({ username: username })
                })
                .then(response => response.json())
                .then(data => {
                  usernameSpinner.classList.add('d-none');

                  if (data.valid) {
                    usernameCheck.classList.remove('d-none');
                    usernameError.classList.add('d-none');
                    usernameErrorMessage.textContent = '';
                  } else {
                    usernameCheck.classList.add('d-none');
                    usernameError.classList.remove('d-none');
                    usernameErrorMessage.textContent = data.message;
                  }
                })
                .catch(error => {
                  usernameSpinner.classList.add('d-none');
                  console.error('Error checking username:', error);
                });
              }
            }, 500); // 500ms debounce time
          });
        })();
      </script>
    <% end %>
  </div>

  <div class="col-md-6">
    <h3>Close account</h3>

    <div class="mb-3">
      Unhappy?
      <%= button_to "Close my account", registration_path(resource_name), data: { confirm: "Are you sure?", turbo_confirm: "Are you sure?" }, method: :delete, class: "btn btn-danger" %>
    </div>
  </div>
</div>